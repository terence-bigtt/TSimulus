/*
 * Copyright 2106 Cetic ASBL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package be.cetic.tsimulus.timeseries.composite

import be.cetic.tsimulus.timeseries.TimeSeries
import org.joda.time.LocalDateTime

/**
  * This time series generator is an aggregation of other generators.
  * @tparam T
  * @tparam U
  * @param generators the generators to aggregate in order to create a new time series
  * @param aggregator the function to apply to aggregate the values generated by each generator
  */
class AggregationTimeSeries[T, U](val aggregator: Seq[T] => U, val generators: Seq[TimeSeries[T]]) extends TimeSeries[U] {
  override def compute(times: Stream[LocalDateTime]) = generators.map(c => c.compute(times).map(Seq(_)))
    .reduce((s1, s2) => (s1 zip s2).map(e => e._1 ++ e._2))
    .map(seq => (seq.head._1, seq.map(_._2)))
    .map(entry => (entry._1, entry._2.flatten match {
      case Seq() => None
      case seq => Some(aggregator(seq))
    }))

  // ToDo : Reduce will break if generators.size == 1


  override def toString = "AggregationTimeSeries(" + aggregator + ", " + generators + ")"

  override def compute(time: LocalDateTime): Option[U] = generators.flatMap(c => c.compute(time)) match {
    case Seq() => None
    case seq => Some(aggregator(seq))
  }
}


object AggregationTimeSeries {
  /**
    * @param aggregator the function to apply to aggregate the values generated by each generator
    * @param generators the generators to compose in order to create a new time series
    * @tparam T
    * @tparam U
    * @return A time series made of the aggregation of all considered generators
    */
  def apply[T, U](aggregator: Seq[T] => U, generators: TimeSeries[T]*): AggregationTimeSeries[T, U] =
    new AggregationTimeSeries(aggregator, generators)
}